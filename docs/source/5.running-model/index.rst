Running Model & Results
=======================
Project Structure
-----------------
The AETOS repository is organized to provide a clear workflow from **input preparation** to **model execution** and **visualisation**.
This folder layout acts as the working environment when cloning the GitHub project:

| ðŸ“‚ **CSVFiles** â†’ OSeMOSYS parameters in CSV format (generated by Otoole)  
| ðŸ“‚ **input_data** â†’ User-edited input data in Excel format (multiple versions)  
| ðŸ“‚ **model** â†’ OSeMOSYS model in TXT format (used for solver runs)  
| ðŸ“‚ **output_data** â†’ Converted input (XLSX â†’ TXT) for solver execution (via Otoole)  
| ðŸ“‚ **results** â†’ Solver output in TXT format  
| ðŸ“‚ **scripts** â†’ Python scripts for data processing and automation  
| ðŸ“‚ **visualisation** â†’ Plots and reports (PDF/PNG)  
| ðŸ“„ **commands_v2_AETOS.txt** â†’ Example command-line workflow (Miniconda + Otoole + solver)  
| ðŸ“„ **config_otoole_v3_AETOS.yaml** â†’ Otoole configuration file (parameters + defaults)  

Running the Model
-----------------

This section walks you through the **complete AETOS workflow** â€”  
from preparing inputs to exporting results.  

When running commands, replace :bdg-primary:`<SCENARIO_NAME>`  
with your chosen scenario tag (e.g. :bdg-success:`AETOS_BSNZ`).

**Step 1 â€“ Prepare Input Data**

Once you have edited your scenario Excel file (:file:`.xlsx`),  
convert it into CSV and then into the OSeMOSYS :file:`datafile` for solver execution:

.. code-block:: bash

   otoole convert excel csv input_data/<SCENARIO_NAME>.xlsx CSVFiles config_otoole_v3_AETOS.yaml

   otoole convert csv datafile CSVFiles output_data/<SCENARIO_NAME>.txt config_otoole_v3_AETOS.yaml

**Step 2 â€“ Generate LP File (GLPK)**

Use **GLPK** to generate the LP problem file:

.. code-block:: bash

   glpsol -m model/osemosys_fast_v8_AETOS.txt -d output_data/<SCENARIO_NAME>.txt --wlp results/results.lp --check

**Step 3 â€“ Solve the Model (e.g. CPLEX)**

Run **CPLEX** to solve the optimization problem:

.. code-block:: clean

   cplex
   read results/results.lp
   optimize
   write results/results.sol
   quit

**Step 4 â€“ Process and Sort Results**

Transform and sort the solver output:

.. code-block:: bash

   python scripts/transform_31072013.py results/results.sol results/trans_results.txt
   sort results/trans_results.txt > results/trans_results_sorted.txt

**Step 5 â€“ Export Results to Excel**

Finally, export the processed results into Excel format for analysis and visualisation. The generated files will be saved in the :file:`results/` folder,  
automatically named according to the current date and version tag.  

.. code-block:: bash

   python scripts/export_to_excel.py
